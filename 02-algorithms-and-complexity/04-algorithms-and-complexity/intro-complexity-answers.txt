Describe an analogy for relating an algorithm that has efficiency O(1) and another algorithm that has O(2n). An example would be:
    - An algorithm that has O(1) is a Cheetah and an algorithm that has O(2n) is a Snail.
** ANSWER:     
    - Another analogy might be the difference between a Prius (O(2n)) vs a Porsche (O(1))
    - And another analogy might be the difference between a moment in time (0(1)) vs an eternity (O(2n))..., as n approaches infinity.


In plain English, what is the best case scenario for binary search?  
** ANSWER: The first node is equal to item being searched for. Ω(1). 


In plain English, what is the worst-case scenario for binary search?  
** ANSWER: The last node is equal to item being searched for. O(n). 


In plain English, what is the bounded-case scenario for binary search? 
** ANSWER: The item being searched is not the first and not the last, but somewhere in between. Ө(log n). 


Create a graph using the data below. Here's a CSV with the values you'll need.
** ANSWER: (See Graph1_LogLinear.xls)


What's the asymptotic limit as n approaches infinity for the function defined by the values above? 
** ANSWER: limit log(n) is infinity


What is the Big-O of an algorithm that has the data points above? 
** ANSWER: O(log n)


Write a Ruby script that calculates and prints the input size to iterations for the worst-case similar to the graph above for linear search.
** ANSWER: (See linear_fn.rb)


Create a graph from the output using Google Sheets or other graphing software. Analyze the graph and denote its Big-O somewhere on the graph.
** ANSWER: (See Graph2_Linear.xls)


What is the Big-O of binary search of a sorted array? 
** ANSWER: O(log n) 


What is the Big-Ω of binary search of a sorted array? 
** ANSWER: Ω(1)


What is the Big-Ө of binary search of a sorted array? 
** ANSWER: Ө(log(n))

