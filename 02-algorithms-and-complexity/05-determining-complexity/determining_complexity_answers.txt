determining_complexity_answers.txt

1. What's the Big-O of the following algorithm? Submit your work and reasoning with your solution. 

  goodbye_world.rb 
  def goodbye_world(n)
    puts "Goodbye World! #{n}"
  end  

  ANSWER:  This function is O(1) constant time.  It always executes only once. 


2. What's the Big-O of the following algorithm? Submit your work and reasoning with your solution. 

  find_largest.rb 

  def find_largest(collection)
    largest = collection[0]
    collection.length.times do |i|
      if collection[i] >= largest
        largest = collection[i]
      end
    end
    largest
  end 

  ANSWER: This function is O(n) linear time. It executes “n” times.  


3. What's the Big-O of the following algorithm? Submit your work and reasoning with your solution. 

  find_largest_2D_array.rb 

  def find_largest(collection)
   largest = collection[0][0]
    collection.length.times do |i|
      subcollection = collection[i]
      subcollection.length.times do |i|
        if subcollection[i] >= largest
          largest = subcollection[i]
        end
     end
    end
    largest
  end 

  ANSWER:  This function is O(n).  The 2D array can be at most (x)(y) or n = x * y elements.  It is iterating over the array one time for n elements.  


4. What's the Big-O of the following algorithm? Submit your work and reasoning with your solution. 

  numbers_recurive.rb 
  def fibonacci(n)
    if (n == 0)
      return 0
    elsif (n == 1)
      return 1
    else
      return numbers(n-1) + numbers(n-2)
    end
  end 

  ANSWER: This function is O(2^n).  For each iteration of n (larger than 1), it calls itself 2 times recursively.  Where n = 1, it calls 2x.  Where n = 2, it calls 4x.  n=3 => 8x, and so on.
 

5. What's the Big-O of the following algorithm? Submit your work and reasoning with your solution. 

  numbers_iterative.rb 

  def iterative(n)
    num1 = 0
    num2 = 1

    i = 0
    while i < n-1
      tmp = num1 + num2
      num1 = num2
      num2 = tmp
      i+=1
    end

    num2
  end

    ANSWER:  This function is O(n).  Its iterates only n times through the while..loop.
 

6. What's the Big-O of the following algorithm? Submit your work and reasoning with your solution. 

  sort.rb 

  def sort(collection, from=0, to=nil)
  if to == nil
   # Sort the whole collection, by default
   to = collection.count - 1
  end

  if from >= to
   # Done sorting
   return
  end

  # Take a pivot value, at the far left
  pivot = collection[from]

  # Min and Max pointers
  min = from
  max = to

  # Current free slot
  free = min

  while min < max
   if free == min # Evaluate collection[max]
     if collection[max] <= pivot # Smaller than pivot, must move
       collection[free] = collection[max]
       min += 1
       free = max
     else
       max -= 1
     end
   elsif free == max # Evaluate collection[min]
     if collection[min] >= pivot # Bigger than pivot, must move
       collection[free] = collection[min]
       max -= 1
       free = min
     else
       min += 1
     end
   else
     raise "Inconsistent state"
   end
  end

  collection[free] = pivot

  quick_sort collection, from, free - 1
  quick_sort collection, free + 1, to

  collection
  end  

  ANSWER: This function is Ө(n^2).  It iterates through n elements to divide into two sub arrays.  Then it recursively calls itself twice.  If the tree is extremely unbalanced, meaning all elements fall to one side, then the sort will end up recursively call itself n times n times => n^2.
